from collections import deque
from typing import List

class Solution:
    def numIslands(self, grid: List[List[str]]) -> int:
        m, n = len(grid), len(grid[0])
        # run bfs and change all 1 to -1 we encounter. If we encounter a -1, we know we have already visited it and can move on. When bfs stops running each time, we increment islands until we visit entire array
        
        neighbors = [[0, 1], [0, -1], [1, 0], [-1, 0]]
        numIslands = 0

        def bfs(row, col):
            q = deque()
            q.append((row, col))
            while q:
                r, c = q.popleft()
                grid[r][c] = "0"
                for neighbor_row, neighbor_col in neighbors:
                    new_row, new_col = r + neighbor_row, c + neighbor_col
                    if 0 <= new_row < m and 0 <= new_col < n and grid[new_row][new_col] == "1":
                        q.append((new_row, new_col))
                        grid[new_row][new_col] = "0"


        for i in range(len(grid)):
            for j in range(len(grid[0])):
                if grid[i][j] == "1":
                    bfs(i, j) 
                    numIslands += 1

        return numIslands
    
if __name__ == "__main__":
    sol = Solution()
    grid = [["1","1","1","0","1","0","1","1","1","1","1","1","1","1","1","0","1","0","1","1"],
            ["0","1","0","0","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","0"],
            ["1","0","1","1","1","0","0","1","1","0","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","0","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","1","0","1","1","1","0","1","1","1","0","1","1","1"],
            ["0","1","1","1","1","1","1","1","1","1","1","1","0","1","1","0","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["0","1","1","1","1","1","1","1","0","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","0","1","1","1","1","1","1","1","0","1","1","1","1","1","1"],
            ["1","0","1","1","1","1","1","0","1","1","1","0","1","1","1","1","0","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","1","1","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","0","1","1","1","1","0","0"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"],
            ["1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1","1"]]

    print(sol.numIslands(grid))

# TC: O(M * N)
# SC: O(M * N)